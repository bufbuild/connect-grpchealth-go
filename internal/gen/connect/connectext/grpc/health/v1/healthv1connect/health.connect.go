// Copyright 2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: connectext/grpc/health/v1/health.proto

package healthv1connect

import (
	context "context"
	errors "errors"
	connect "github.com/bufbuild/connect"
	v1 "github.com/bufbuild/connect-grpchealth-go/internal/gen/go/connectext/grpc/health/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant isn't defined, this code was generated
// with a version of connect newer than the one compiled into your binary. You can fix the problem
// by either regenerating this code with an older version of connect or updating the connect version
// compiled into your binary.
const _ = connect.IsAtLeastVersion0_0_1

const (
	// HealthName is the fully-qualified name of the Health service.
	HealthName = "internal.health.v1.Health"
)

// HealthClient is a client for the internal.health.v1.Health service.
type HealthClient interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// Performs a watch for the serving status of the requested service.
	// The server will immediately send back a message indicating the current
	// serving status.  It will then subsequently send a new message whenever
	// the service's serving status changes.
	//
	// If the requested service is unknown when the call is received, the
	// server will send a message setting the serving status to
	// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
	// future point, the serving status of the service becomes known, the
	// server will send a new message with the service's serving status.
	//
	// If the call terminates with status UNIMPLEMENTED, then clients
	// should assume this method is not supported and should not retry the
	// call.  If the call terminates with any other status (including OK),
	// clients should retry the call with appropriate exponential backoff.
	Watch(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.ServerStreamForClient[v1.HealthCheckResponse], error)
}

// NewHealthClient constructs a client for the internal.health.v1.Health service. By default, it
// uses the binary protobuf Codec, asks for gzipped responses, and sends uncompressed requests. It
// doesn't have a default protocol; you must supply either the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the gRPC server (e.g., https://api.acme.com or
// https://acme.com/grpc).
func NewHealthClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) (HealthClient, error) {
	baseURL = strings.TrimRight(baseURL, "/")
	checkClient, err := connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
		httpClient,
		baseURL+"/internal.health.v1.Health/Check",
		opts...,
	)
	if err != nil {
		return nil, err
	}
	watchClient, err := connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
		httpClient,
		baseURL+"/internal.health.v1.Health/Watch",
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return &healthClient{
		check: checkClient,
		watch: watchClient,
	}, nil
}

// healthClient implements HealthClient.
type healthClient struct {
	check *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	watch *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
}

// Check calls internal.health.v1.Health.Check.
func (c *healthClient) Check(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// Watch calls internal.health.v1.Health.Watch.
func (c *healthClient) Watch(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.ServerStreamForClient[v1.HealthCheckResponse], error) {
	return c.watch.CallServerStream(ctx, req)
}

// HealthHandler is an implementation of the internal.health.v1.Health service.
type HealthHandler interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// Performs a watch for the serving status of the requested service.
	// The server will immediately send back a message indicating the current
	// serving status.  It will then subsequently send a new message whenever
	// the service's serving status changes.
	//
	// If the requested service is unknown when the call is received, the
	// server will send a message setting the serving status to
	// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
	// future point, the serving status of the service becomes known, the
	// server will send a new message with the service's serving status.
	//
	// If the call terminates with status UNIMPLEMENTED, then clients
	// should assume this method is not supported and should not retry the
	// call.  If the call terminates with any other status (including OK),
	// clients should retry the call with appropriate exponential backoff.
	Watch(context.Context, *connect.Request[v1.HealthCheckRequest], *connect.ServerStream[v1.HealthCheckResponse]) error
}

// NewHealthHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the gRPC and gRPC-Web protocols with the binary protobuf and JSON
// codecs.
func NewHealthHandler(svc HealthHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/internal.health.v1.Health/Check", connect.NewUnaryHandler(
		"/internal.health.v1.Health/Check",
		svc.Check,
		opts...,
	))
	mux.Handle("/internal.health.v1.Health/Watch", connect.NewServerStreamHandler(
		"/internal.health.v1.Health/Watch",
		svc.Watch,
		opts...,
	))
	return "/internal.health.v1.Health/", mux
}

// UnimplementedHealthHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthHandler struct{}

func (UnimplementedHealthHandler) Check(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internal.health.v1.Health.Check isn't implemented"))
}

func (UnimplementedHealthHandler) Watch(context.Context, *connect.Request[v1.HealthCheckRequest], *connect.ServerStream[v1.HealthCheckResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("internal.health.v1.Health.Watch isn't implemented"))
}
